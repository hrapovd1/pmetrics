// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: internal/proto/pmetrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Metrics_ReportMetric_FullMethodName     = "/pmetrics.Metrics/ReportMetric"
	Metrics_ReportEncMetric_FullMethodName  = "/pmetrics.Metrics/ReportEncMetric"
	Metrics_ReportMetrics_FullMethodName    = "/pmetrics.Metrics/ReportMetrics"
	Metrics_ReportEncMetrics_FullMethodName = "/pmetrics.Metrics/ReportEncMetrics"
)

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	ReportMetric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
	ReportEncMetric(ctx context.Context, in *EncMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
	ReportMetrics(ctx context.Context, opts ...grpc.CallOption) (Metrics_ReportMetricsClient, error)
	ReportEncMetrics(ctx context.Context, opts ...grpc.CallOption) (Metrics_ReportEncMetricsClient, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) ReportMetric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, Metrics_ReportMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) ReportEncMetric(ctx context.Context, in *EncMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, Metrics_ReportEncMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) ReportMetrics(ctx context.Context, opts ...grpc.CallOption) (Metrics_ReportMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[0], Metrics_ReportMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsReportMetricsClient{stream}
	return x, nil
}

type Metrics_ReportMetricsClient interface {
	Send(*MetricRequest) error
	CloseAndRecv() (*MetricResponse, error)
	grpc.ClientStream
}

type metricsReportMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsReportMetricsClient) Send(m *MetricRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsReportMetricsClient) CloseAndRecv() (*MetricResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MetricResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricsClient) ReportEncMetrics(ctx context.Context, opts ...grpc.CallOption) (Metrics_ReportEncMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[1], Metrics_ReportEncMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsReportEncMetricsClient{stream}
	return x, nil
}

type Metrics_ReportEncMetricsClient interface {
	Send(*EncMetricRequest) error
	CloseAndRecv() (*MetricResponse, error)
	grpc.ClientStream
}

type metricsReportEncMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsReportEncMetricsClient) Send(m *EncMetricRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsReportEncMetricsClient) CloseAndRecv() (*MetricResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MetricResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility
type MetricsServer interface {
	ReportMetric(context.Context, *MetricRequest) (*MetricResponse, error)
	ReportEncMetric(context.Context, *EncMetricRequest) (*MetricResponse, error)
	ReportMetrics(Metrics_ReportMetricsServer) error
	ReportEncMetrics(Metrics_ReportEncMetricsServer) error
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (UnimplementedMetricsServer) ReportMetric(context.Context, *MetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMetric not implemented")
}
func (UnimplementedMetricsServer) ReportEncMetric(context.Context, *EncMetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEncMetric not implemented")
}
func (UnimplementedMetricsServer) ReportMetrics(Metrics_ReportMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportMetrics not implemented")
}
func (UnimplementedMetricsServer) ReportEncMetrics(Metrics_ReportEncMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportEncMetrics not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_ReportMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).ReportMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_ReportMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).ReportMetric(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_ReportEncMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).ReportEncMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_ReportEncMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).ReportEncMetric(ctx, req.(*EncMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_ReportMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).ReportMetrics(&metricsReportMetricsServer{stream})
}

type Metrics_ReportMetricsServer interface {
	SendAndClose(*MetricResponse) error
	Recv() (*MetricRequest, error)
	grpc.ServerStream
}

type metricsReportMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsReportMetricsServer) SendAndClose(m *MetricResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsReportMetricsServer) Recv() (*MetricRequest, error) {
	m := new(MetricRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metrics_ReportEncMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).ReportEncMetrics(&metricsReportEncMetricsServer{stream})
}

type Metrics_ReportEncMetricsServer interface {
	SendAndClose(*MetricResponse) error
	Recv() (*EncMetricRequest, error)
	grpc.ServerStream
}

type metricsReportEncMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsReportEncMetricsServer) SendAndClose(m *MetricResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsReportEncMetricsServer) Recv() (*EncMetricRequest, error) {
	m := new(EncMetricRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmetrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportMetric",
			Handler:    _Metrics_ReportMetric_Handler,
		},
		{
			MethodName: "ReportEncMetric",
			Handler:    _Metrics_ReportEncMetric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportMetrics",
			Handler:       _Metrics_ReportMetrics_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportEncMetrics",
			Handler:       _Metrics_ReportEncMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/pmetrics.proto",
}
